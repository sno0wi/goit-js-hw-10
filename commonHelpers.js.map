{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport izitoast from \"izitoast\"\nimport \"izitoast/dist/css/iziToast.min.css\"\n\n// ***CLASS****\n\n// const startBtn = document.querySelector(\"[data-start]\");\n// const daysElement = document.querySelector(\"[data-days]\");\n// const hoursElement = document.querySelector(\"[data-hours]\");\n// const minutesElement = document.querySelector(\"[data-minutes]\");\n// const secondsElement = document.querySelector(\"[data-seconds]\");\n\n// let userSelectedDate;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//     onClose(selectedDates) {\n//         userSelectedDate = selectedDates[0];\n//         console.log(selectedDates[0]);\n//         checkData(userSelectedDate);\n//   },\n// };\n// flatpickr(\"#datetime-picker\", options);\n\n// function checkData(userSelectedDate) {\n//     const date = userSelectedDate instanceof Date ? userSelectedDate : new Date(userSelectedDate);\n\n//     const currentDate = new Date();\n\n//     if (date < currentDate) {\n//         izitoast.show({\n//         message: \"Please choose a date in the future\"\n//         });\n//         startBtn.disabled = true;\n//     } else {\n//         startBtn.disabled = false;\n//     }\n// }\n\n// class Timer {\n//     constructor({ onTick }) {\n//         this.onTick = onTick;\n//         this.isActive = false;\n//         this.intervalId = null;\n\n//         this.initTimer();\n//     }\n    \n//     initTimer() {\n//         const time = this.convertMs(0);\n//         this.onTick(time);\n//     }\n\n//     convertMs(ms) {\n//     // Number of milliseconds per unit of time\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n\n//     // Remaining days\n//     const days = Math.floor(ms / day);\n//     // Remaining hours\n//     const hours = Math.floor((ms % day) / hour);\n//     // Remaining minutes\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     // Remaining seconds\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//     return { days, hours, minutes, seconds };\n//     }\n\n\n//     start() {\n//         if (this.isActive) {\n//             return;\n//         }\n\n//         this.initTimer();\n\n//         this.isActive = true;\n\n//         this.intervalId = setInterval(() => {\n//             const currentTime = Date.now();\n//             const diff = userSelectedDate - currentTime;\n\n//             const time = this.convertMs(diff);\n//             this.onTick(time);\n\n//             if (time.days === 0 && time.hours === 0 && time.minutes === 0 && time.seconds === 0) {\n//                 this.stop();\n//             }\n\n//         }, 1000)\n\n//         startBtn.disabled = true;\n//     }\n\n//     stop() {\n//         if (!this.isActive) {\n//       return;\n//         }\n        \n//         this.isActive = false;\n//         clearInterval(this.intervalId);\n//         startBtn.disabled = false;\n//     }\n// }\n\n// function addLeadingZero(value){\n//     return String(value).padStart(2, \"0\");\n//   }\n\n// const timer = new Timer({\n//     onTick: updateClockface,\n// });\n\n// startBtn.addEventListener(\"click\", timer.start.bind(timer));\n\n// function updateClockface({ days, hours, minutes, seconds }) {\n//     daysElement.textContent = addLeadingZero(days);\n//     hoursElement.textContent = addLeadingZero(hours);\n//     minutesElement.textContent = addLeadingZero(minutes);\n//     secondsElement.textContent = addLeadingZero(seconds);\n// }\n\n// ***CLASS****\n\nconst startBtn = document.querySelector(\"[data-start]\");\nconst daysElement = document.querySelector(\"[data-days]\");\nconst hoursElement = document.querySelector(\"[data-hours]\");\nconst minutesElement = document.querySelector(\"[data-minutes]\");\nconst secondsElement = document.querySelector(\"[data-seconds]\");\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    console.log(selectedDates[0]);\n    checkData(userSelectedDate);\n  },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction checkData(userSelectedDate) {\n  const date = userSelectedDate instanceof Date ? userSelectedDate : new Date(userSelectedDate);\n\n  const currentDate = new Date();\n\n  if (date < currentDate) {\n    izitoast.show({\n      message: \"Please choose a date in the future\",\n    });\n    startBtn.disabled = true;\n  } else {\n    startBtn.disabled = false;\n  }\n}\n\nlet isActive = false;\nlet intervalId;\n\nfunction initTimer() {\n  const time = convertMs(0);\n  updateClockface(time);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction start() {\n  if (isActive) {\n    return;\n  }\n\n  initTimer();\n\n  isActive = true;\n\n  intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const diff = userSelectedDate - currentTime;\n\n    const time = convertMs(diff);\n    updateClockface(time);\n\n    if (time.days === 0 && time.hours === 0 && time.minutes === 0 && time.seconds === 0) {\n      stop();\n    }\n  }, 1000);\n\n  startBtn.disabled = true;\n}\n\nfunction stop() {\n  if (!isActive) {\n    return;\n  }\n\n  isActive = false;\n  clearInterval(intervalId);\n  startBtn.disabled = false;\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\nfunction updateClockface({ days, hours, minutes, seconds }) {\n  daysElement.textContent = addLeadingZero(days);\n  hoursElement.textContent = addLeadingZero(hours);\n  minutesElement.textContent = addLeadingZero(minutes);\n  secondsElement.textContent = addLeadingZero(seconds);\n}\n\nstartBtn.addEventListener(\"click\", start);"],"names":["startBtn","daysElement","hoursElement","minutesElement","secondsElement","userSelectedDate","options","selectedDates","checkData","flatpickr","date","currentDate","izitoast","isActive","intervalId","initTimer","time","convertMs","updateClockface","ms","days","hours","minutes","seconds","start","currentTime","diff","stop","addLeadingZero","value"],"mappings":"2GAoIA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAE9D,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GACjC,QAAQ,IAAIA,EAAc,EAAE,EAC5BC,EAAUH,CAAgB,CAC3B,CACH,EAEAI,EAAU,mBAAoBH,CAAO,EAErC,SAASE,EAAUH,EAAkB,CACnC,MAAMK,EAAOL,aAA4B,KAAOA,EAAmB,IAAI,KAAKA,CAAgB,EAEtFM,EAAc,IAAI,KAEpBD,EAAOC,GACTC,EAAS,KAAK,CACZ,QAAS,oCACf,CAAK,EACDZ,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAExB,CAEA,IAAIa,EAAW,GACXC,EAEJ,SAASC,GAAY,CACnB,MAAMC,EAAOC,EAAU,CAAC,EACxBC,EAAgBF,CAAI,CACtB,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,GAAQ,CACXX,IAIJE,IAEAF,EAAW,GAEXC,EAAa,YAAY,IAAM,CAC7B,MAAMW,EAAc,KAAK,MACnBC,EAAOrB,EAAmBoB,EAE1BT,EAAOC,EAAUS,CAAI,EAC3BR,EAAgBF,CAAI,EAEhBA,EAAK,OAAS,GAAKA,EAAK,QAAU,GAAKA,EAAK,UAAY,GAAKA,EAAK,UAAY,GAChFW,GAEH,EAAE,GAAI,EAEP3B,EAAS,SAAW,GACtB,CAEA,SAAS2B,GAAO,CACTd,IAILA,EAAW,GACX,cAAcC,CAAU,EACxBd,EAAS,SAAW,GACtB,CAEA,SAAS4B,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASX,EAAgB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DtB,EAAY,YAAc2B,EAAeR,CAAI,EAC7ClB,EAAa,YAAc0B,EAAeP,CAAK,EAC/ClB,EAAe,YAAcyB,EAAeN,CAAO,EACnDlB,EAAe,YAAcwB,EAAeL,CAAO,CACrD,CAEAvB,EAAS,iBAAiB,QAASwB,CAAK"}